/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CarOwnerRole;

import Business.Enterprise.Enterprise;
import Business.Organization.CarOwnerOrganization;
import Business.Organization.CarRenterOrganization;
import Business.Organization.Organization;
import Business.RideSharing.CarListing;
import Business.RideSharing.CarListingDirectory;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.RideShareWorkRequest;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sarthak
 */
public class CarOwnerListingJpanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private CarOwnerOrganization organization;
    RideShareWorkRequest rideShareWorkRequest;

    public CarOwnerListingJpanel(JPanel userProcessContainer, UserAccount userAccount, Enterprise enterprise, CarOwnerOrganization organization) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
        this.organization = organization;
        populateTable();
    }

    public void populateTable() {
        int rowCount = tableListing.getRowCount();
        DefaultTableModel model = (DefaultTableModel) tableListing.getModel();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }

        for (CarListing carListing : organization.getCarListingDirectory().getCarListingDirectory()) {
            if (carListing.getCarOwner() == userAccount.getEmployee()) {
                Object[] row = new Object[4];
                row[0] = carListing;
                row[1] = carListing.getCarType();
                row[2] = carListing.getCarRent();
                row[3] = carListing.getOnOffmarket();
                model.addRow(row);
            }

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableListing = new javax.swing.JTable();
        btnOnMarket = new javax.swing.JButton();
        btnOffMarket = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnAddCarListing = new javax.swing.JButton();
        btnViewCarlisting = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setBackground(new java.awt.Color(187, 222, 251));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel1.setText("Car Listing Details:");

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        tableListing.setBackground(new java.awt.Color(227, 242, 253));
        tableListing.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        tableListing.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Car Model", "Car Type", "Rent per Day", "On/ Off Market"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableListing.setToolTipText("");
        jScrollPane1.setViewportView(tableListing);

        btnOnMarket.setBackground(new java.awt.Color(25, 118, 210));
        btnOnMarket.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        btnOnMarket.setForeground(new java.awt.Color(255, 255, 255));
        btnOnMarket.setText("On Market");
        btnOnMarket.setToolTipText("Select a row from table");
        btnOnMarket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOnMarketActionPerformed(evt);
            }
        });

        btnOffMarket.setBackground(new java.awt.Color(25, 118, 210));
        btnOffMarket.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        btnOffMarket.setForeground(new java.awt.Color(255, 255, 255));
        btnOffMarket.setText("Off Market");
        btnOffMarket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOffMarketActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(3, 155, 229));
        btnDelete.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete Car Listing");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnAddCarListing.setBackground(new java.awt.Color(3, 155, 229));
        btnAddCarListing.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        btnAddCarListing.setForeground(new java.awt.Color(255, 255, 255));
        btnAddCarListing.setText("Add new Car Listing");
        btnAddCarListing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCarListingActionPerformed(evt);
            }
        });

        btnViewCarlisting.setBackground(new java.awt.Color(3, 155, 229));
        btnViewCarlisting.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        btnViewCarlisting.setForeground(new java.awt.Color(255, 255, 255));
        btnViewCarlisting.setText("View Car Listing");
        btnViewCarlisting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewCarlistingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnOnMarket, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnOffMarket, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(92, 92, 92))
                    .addComponent(jSeparator1)))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1023, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddCarListing, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnViewCarlisting, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOnMarket, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOffMarket, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddCarListing, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewCarlisting, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(135, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnOnMarketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOnMarketActionPerformed
        int selectedRow = tableListing.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        CarListing carListing = (CarListing) tableListing.getValueAt(selectedRow, 0);

        String xx = null;
        if (userAccount.getWorkQueue().getWorkRequestList().size() > 0) {
            for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()) {
               if (request instanceof RideShareWorkRequest){
                  if (((RideShareWorkRequest) request).getCarListing() == carListing && carListing.getOnOffmarket()=="OnMarket") {
                    JOptionPane.showMessageDialog(null, "This listing is already On Market", "Warning", JOptionPane.WARNING_MESSAGE);
//                System.out.println("yo");
                    xx = "yes";
                } 
               }
                
                break;
            }
        }
        if (xx != "yes") {
            rideShareWorkRequest = new RideShareWorkRequest();
            rideShareWorkRequest.setCarListing(carListing);
            rideShareWorkRequest.setSender(userAccount);
            rideShareWorkRequest.setStatus("NotHired");
            carListing.setOnOffmarket("OnMarket");

            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof CarRenterOrganization) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(rideShareWorkRequest);
                userAccount.getWorkQueue().getWorkRequestList().add(rideShareWorkRequest);
            }
//                System.out.println("yoooo");
            populateTable();
        }
    }//GEN-LAST:event_btnOnMarketActionPerformed

    private void btnOffMarketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOffMarketActionPerformed
        int selectedRow = tableListing.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            CarListing carListing = (CarListing) tableListing.getValueAt(selectedRow, 0);

//            for (WorkRequest workRequest : userAccount.getWorkQueue().getWorkRequestList()) 
            ArrayList<WorkRequest> workRequestList = userAccount.getWorkQueue().getWorkRequestList();
            
            for(int i=0 ; i<workRequestList.size() ; i++ ){
                if (workRequestList.get(i) instanceof RideShareWorkRequest){
                   if (((RideShareWorkRequest) workRequestList.get(i)).getCarListing() == carListing 
                        && workRequestList.get(i).getStatus() == "Hired") {
                    JOptionPane.showMessageDialog(null, "This car is currently Hired", "Error", JOptionPane.ERROR_MESSAGE);
//                    return;
                }
                if (carListing == ((RideShareWorkRequest) workRequestList.get(i)).getCarListing() && ((RideShareWorkRequest)workRequestList.get(i)).getStatus() == "NotHired") {
                    carListing.setOnOffmarket("OffMarket");

//                    Organization org = null;
//                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
//                        if (organization instanceof CarRenterOrganization) {
//                            org = organization;
//                        }
//                    }
//                    if (org != null) {
//                        org.getWorkQueue().deleteWorkRequest(workRequestList.get(i));
//                        userAccount.getWorkQueue().deleteWorkRequest(workRequestList.get(i));
//                    }

                    populateTable();
                } 
                }
                
                
            }
        }
    }//GEN-LAST:event_btnOffMarketActionPerformed


    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = tableListing.getSelectedRow();
        if (selectedRow >= 0) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to delete this listing?", "Warning", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
                CarListing carListing = (CarListing) tableListing.getValueAt(selectedRow, 0);

//                for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()) 
                ArrayList<WorkRequest> workRequestList = userAccount.getWorkQueue().getWorkRequestList();
                
                for(int i=0 ; i<workRequestList.size() ; i++ ){
                    if (workRequestList.get(i) instanceof RideShareWorkRequest){
                       if (carListing == ((RideShareWorkRequest) workRequestList.get(i)).getCarListing() && workRequestList.get(i).getStatus() == "Hired") {
                        JOptionPane.showMessageDialog(null, "Cannot Delete !! This car is currently hired.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    if (carListing == ((RideShareWorkRequest) workRequestList.get(i)).getCarListing() && ((RideShareWorkRequest)workRequestList.get(i)).getStatus() == "NotHired") {
                        organization.getCarListingDirectory().deleteCarlisting(carListing);
//                        Organization org = null;
//                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
//                        if (organization instanceof CarRenterOrganization) {
//                            org = organization;
//                            break;
//                        }
//                    }
//                    if (org != null) {
//                        org.getWorkQueue().deleteWorkRequest(workRequestList.get(i));
//                        userAccount.getWorkQueue().deleteWorkRequest(workRequestList.get(i));
//                    }
                    }  
                    }
                   
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
        }

        populateTable();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddCarListingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCarListingActionPerformed
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("AddCarListingJPanel", new AddCarListingJPanel(userProcessContainer, userAccount, enterprise, organization));
        layout.next(userProcessContainer);

    }//GEN-LAST:event_btnAddCarListingActionPerformed

    private void btnViewCarlistingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewCarlistingActionPerformed
        int selectedRow = tableListing.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            CarListing carListing = (CarListing) tableListing.getValueAt(selectedRow, 0);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            userProcessContainer.add("ViewCarListingJPanel", new ViewCarListingJPanel(userProcessContainer, userAccount, enterprise, organization, carListing));
            layout.next(userProcessContainer);
        }

    }//GEN-LAST:event_btnViewCarlistingActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCarListing;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnOffMarket;
    private javax.swing.JButton btnOnMarket;
    private javax.swing.JButton btnViewCarlisting;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tableListing;
    // End of variables declaration//GEN-END:variables
}
